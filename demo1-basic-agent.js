import "dotenv/config";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { HumanMessage, AIMessage } from "@langchain/core/messages";
import { log, logAgent, logDivider } from "./utils/logger.js";

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
function evaluateExpression(expression) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Function –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    // –≠—Ç–æ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —á–µ–º eval(), —Ç–∞–∫ –∫–∞–∫ –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    return new Function(`return ${expression}`)();
  } catch (error) {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    logAgent("Tool:Calculator", `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: '${expression}': ${error.message}`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    return `–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ '${expression}'.`;
  }
}

const getCurrentTime = tool(() => {
    const time = new Date().toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZoneName: 'short'
    });
    logAgent("Tool:getCurrentTime", `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${time}`);
    return `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${time}`;
}, {
    name: "getCurrentTime",
    description: "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.",
    schema: z.object({})
});

const calculator = tool(({ expression }) => {
    const result = evaluateExpression(expression);
    logAgent("Tool:Calculator", `–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è '${expression}': ${result}`);
    return `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`;
}, {
    name: "calculator",
    description: "–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ.",
    schema: z.object({
        expression: z.string().describe("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '10 + 5 * (8 / 4)'")
    })
});

const model = new ChatOpenAI({
  modelName: "gpt-4o",
  temperature: 0,
});

const assistantAgent = createReactAgent({
  llm: model,
  tools: [getCurrentTime, calculator]
});

async function testBasicAgent() {
    logDivider();
    log("ü§ñ", "–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...");

    const question = "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å? –ò —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 25 * 37?";
    log("‚ùì", `–í–æ–ø—Ä–æ—Å: ${question}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º new HumanMessage –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const initialState = { messages: [new HumanMessage({ content: question })] };
    const stream = await assistantAgent.stream(initialState, { streamMode: "debug" });

    for await (const chunk of stream) {
        if (chunk.type === 'task_result' && chunk.payload.name === 'agent' && chunk.payload.result) {
            const messages = chunk.payload.result[0][1];
            for (const message of messages) {
                if (message.kwargs.additional_kwargs && message.kwargs.additional_kwargs.tool_calls) {
                    logAgent("ü§î Agent", "–†–µ—à–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:");
                    message.kwargs.additional_kwargs.tool_calls.forEach(call => {
                        logAgent("   ", `-> –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: '${call.function.name}', –ê—Ä–≥—É–º–µ–Ω—Ç—ã: ${call.function.arguments}`);
                    });
                } else if (message.kwargs.content) {
                    log("‚úÖ", `–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: ${message.kwargs.content}`);
                }
            }
        } else if (chunk.type === 'task_result' && chunk.payload.name === 'tools' && chunk.payload.result) {
            const messages = chunk.payload.result[0][1];
            for (const message of messages) {
                logAgent("üõ†Ô∏è Tool", `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç '${message.kwargs.name}': ${message.kwargs.content}`);
            }
        }
    }
    logDivider();
}

testBasicAgent();
